import tkinter as tk
from tkinter import filedialog, messagebox, ttk, simpledialog
from PIL import Image, ImageTk
import os
import shutil

class CloudStorageApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Aura Cloud Storage")
        self.master.geometry("400x300")
# replace this("C:/Users/user/Downloads/Default_clouds_contains_a_file_and_ssd_dive_images_1.jpg") by image path
        # Load background image
        bg_image = Image.open("C:/Users/user/Downloads/Default_clouds_contains_a_file_and_ssd_dive_images_1.jpg")
        bg_photo = ImageTk.PhotoImage(bg_image)
        bg_label = tk.Label(master, image=bg_photo)
        bg_label.image = bg_photo
        bg_label.place(relwidth=1, relheight=1)

        self.storage_path = "./cloud_storage"
        if not os.path.exists(self.storage_path):
            os.makedirs(self.storage_path)

        self.create_gui()

    def create_gui(self):
        self.settings_button = tk.Button(self.master, text="⚙️", command=self.open_settings)
        self.settings_button.place(relx=0.95, rely=0.05, anchor="ne")

        self.view_files_button = tk.Button(self.master, text="View Files", command=self.open_file_viewer)
        self.view_files_button.place(relx=0.05, rely=0.05, anchor="nw")

        self.label = tk.Label(self.master, text="Select a file to upload:")
        self.label.pack(pady=10)

        self.upload_button = tk.Button(self.master, text="Upload File", command=self.upload_file)
        self.upload_button.pack(pady=10)

    def open_settings(self):
        settings_window = tk.Toplevel(self.master)
        settings_window.title("Settings")
        settings_window.geometry("200x150")

        theme_label = tk.Label(settings_window, text="Select theme:")
        theme_label.pack(pady=5)

        theme_var = tk.StringVar()
        theme_var.set("Device")

        theme_menu = ttk.Combobox(settings_window, textvariable=theme_var, values=["Device", "Dark", "Light"])
        theme_menu.pack()

        def apply_theme():
            selected_theme = theme_var.get()
            self.set_theme(selected_theme)
            settings_window.destroy()

        apply_button = tk.Button(settings_window, text="Apply", command=apply_theme)
        apply_button.pack(pady=5)

    def set_theme(self, theme):
        if theme == "Dark":
            self.master.config(bg="black")
            self.label.config(fg="white")
            self.upload_button.config(bg="gray", fg="white")
        elif theme == "Light":
            self.master.config(bg="white")
            self.label.config(fg="black")
            self.upload_button.config(bg="lightgray", fg="black")

    def open_file_viewer(self):
        file_viewer_window = tk.Toplevel(self.master)
        file_viewer_window.title("File Viewer")
        file_viewer_window.geometry("400x300")

        files = os.listdir(self.storage_path)
        if not files:
            messagebox.showinfo("No Files", "No files found in cloud storage.")
        else:
            file_list = tk.Text(file_viewer_window)
            file_list.pack()
            for file_name in files:
                file_list.insert(tk.END, f"{file_name}\n")

    def upload_file(self):
        file_path = filedialog.askopenfilename(initialdir="/", title="Select file to upload")
        if not file_path:
            return

        file_name = os.path.basename(file_path)
        dest_path = os.path.join(self.storage_path, file_name)
        if os.path.exists(dest_path):
            messagebox.showerror("Error", "File already exists in cloud storage.")
            return

        try:
            os.rename(file_path, dest_path)
            self.organize_file(dest_path)
            messagebox.showinfo("Success", "File uploaded successfully.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to upload file: {str(e)}")

    def organize_file(self, file_path):
        file_name = os.path.basename(file_path)
        file_type = self.get_file_type(file_path)
        folder_path = os.path.join(self.storage_path, file_type)
        if not os.path.exists(folder_path):
            os.makedirs(folder_path)
        dest_path = os.path.join(folder_path, file_name)
        shutil.move(file_path, dest_path)

    def get_file_type(self, file_path):
        file_ext = os.path.splitext(file_path)[1].lower()
        if file_ext in (".jpg", ".jpeg", ".png", ".gif"):
            return "Pictures"
        elif file_ext in (".mp4", ".avi", ".mkv", ".mov"):
            return "Videos"
        elif file_ext in (".doc", ".docx", ".pdf", ".txt"):
            return "Documents"
        else:
            return "Others"

if __name__ == "__main__":
    root = tk.Tk()
    app = CloudStorageApp(root)
    root.mainloop()
